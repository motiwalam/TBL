-- functions are defined with ->
-- the parameters of the function are given as a list of names on the left
-- the body of the function is given on the right

-- if there is only a single parameter, the name can be given directly, instead of in a list

-- a function that doubles its input
n -> 2 * n;

-- a function that returns a list of 3 copies of its input
n -> [n, n, n];

-- functions are applied with @
-- the function appears on the left
-- and the arguments appears as a list on the right
-- if the argument is a single, non-list value, then it can be given directly, instead of in a list

f: n -> 3 * n;
-- applying f to 1
f @ 1;
f @ [1];

-- applying f to [1, 2, 3]
f @ [[1, 2, 3]];


-- recursion can be accomplished in two ways
--  1. by assigning the function to a name and using that name inside the function
--  2. by using the special symbol '&' inside the function to reference the function being defined

-- the fibonacci function, defined recursively, in two ways
fib1: n -> n < 2 ? [1, fib1 @ [n - 1] + fib1 @ [n - 2]];
fib2: n -> n < 2 ? [1, & @ [n - 1] + & @ [n - 2]];

-- TBL has variadic functions as well
-- variadic functions are functions defined with '=>' instead of '->'
-- in a variadic function, the last parameter is treated as a 'catch all' 
-- all excess arguments are captured as a list available under the last parameter
-- of a variadic function

-- for example: sum all the arguments
vsum: r => sum @ [r];

vsum @ [1,2,3,4,5,6,7]; --> 28

-- a and b are the first two arguments
-- everything after that is in the list rest
f: [a, b, rest] => (a*b)^rest;

f @ [5, 2, 7, 8, 9]; --> (5*2)^[7, 8, 9]
